{
  "language": "Solidity",
  "sources": {
    "contracts/FoundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\ncontract FoundMe {\n    using PriceConverter for uint;\n\n    address immutable i_owner;\n    address immutable i_priceFeed;\n\n    uint constant MIN_USD = 50 * 1e18;\n    address[] public founders;\n    mapping(address => uint) public addressToAmount;\n\n    constructor(address priceFeed) {\n        i_owner = msg.sender;\n        i_priceFeed = priceFeed;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"Not owner\");\n        _;\n    }\n\n    function found() public payable {\n        require(\n            msg.value.toUsd(i_priceFeed) >= MIN_USD,\n            \"Didn't send enough ETH\"\n        );\n        founders.push(msg.sender);\n        addressToAmount[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint i = 0; i < founders.length; i++) {\n            addressToAmount[founders[i]] = 0;\n        }\n        founders = new address[](0);\n\n        // Call returns a boolean value indicating success or failure.\n        // This is the current recommended method to use.\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\n            \"\"\n        );\n        require(sent, \"Failed to send Ether\");\n    }\n\n    receive() external payable {\n        found();\n    }\n\n    fallback() external payable {\n        found();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(address _priceFeed) internal view returns (uint) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_priceFeed);\n        (, int price, , , ) = priceFeed.latestRoundData();\n        return uint(price * 1e10);\n    }\n\n    function toUsd(uint ethAmount, address priceFeed)\n        internal\n        view\n        returns (uint)\n    {\n        return (getPrice(priceFeed) * ethAmount) / 1e18;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}